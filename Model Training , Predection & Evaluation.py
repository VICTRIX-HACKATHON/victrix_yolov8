# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qNXr0F7EPkQOvMENGRSyrcv6CWNb-Jbc
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/gdrive')

!cp -r /content/gdrive/MyDrive/HackByte_Dataset/data /content

!pip install ultralytics
!pip install seaborn

from ultralytics import YOLO
model = YOLO("yolov8s.pt")

# Training the model using config.yaml file
model.train(
    data="/content/gdrive/MyDrive/HackByte_Dataset/yolo_params.yaml",
    epochs=50,
    imgsz=640,
    batch=16,
    patience=20,  # Early stopping if no improvement
    optimizer='AdamW',  # Better optimizer than default SGD
    lr0=0.01,  # Initial learning rate
    lrf=0.1,  # Final learning rate (10% of lr0)
    augment=True,  # Enable basic augmentations
    hsv_h=0.015,  # Color jitter
    flipud=0.1,  # Vertical flip probability
    fliplr=0.5,  # Horizontal flip probability
    degrees=10.0,  # Rotation augmentation
    name='optimized_train'  # Custom run name
)

model = YOLO('/content/runs/detect/optimized_train3/weights/last.pt')
model.train(
    # Start fresh but initialize with last weights
    epochs=25,  # Only new epochs needed
    # Keep all original parameters:
    data="/content/gdrive/MyDrive/HackByte_Dataset/yolo_params.yaml",
    imgsz=640,
    batch=16,
    name='optimized_train_phase2'  # Separate log folder
)

#Enhanced validation (with TTA for better metrics)
metrics = model.val(
    data='/content/gdrive/MyDrive/HackByte_Dataset/yolo_params.yaml',
    split='val',
    save=True,
    plots=True,
    augment=True  # Test-time augmentation
)

print("\nðŸ“Š Validation Metrics:")
print(f"âœ… mAP@0.5: {metrics.box.map50:.4f}")
print(f"âœ… mAP@0.5-0.95: {metrics.box.map:.4f}")
print(f"âœ… Precision: {metrics.box.p.mean():.4f}")
print(f"âœ… Recall: {metrics.box.r.mean():.4f}")

!yolo detect predict \
model=/content/runs/detect/optimized_train_phase2/weights/best.pt \
source=/content/gdrive/MyDrive/HackByte_Dataset/data/test/images \
save=True \
project=/content/runs/detect \
name='predict' \
exist_ok=True

import glob
import random
from IPython.display import Image, display

# Get all image paths
image_paths = glob.glob('/content/runs/detect/predict/*.jpg')

# Shuffle the list to randomize
random.shuffle(image_paths)

for image_path in image_paths[10:]:  # Adjust the number as needed
    display(Image(filename=image_path, height=400))
    print('\n')

import pandas as pd
df = pd.read_csv('runs/detect/optimized_train_phase2/results.csv')  # Full path
print("Max mAP50:", df['metrics/mAP50(B)'].max())